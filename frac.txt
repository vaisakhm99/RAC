MakeUnitVector[k_]:={Subscript[x, k],Subscript[y, k],Subscript[z, k]};
AllParameters[n_]:=Module[{i},Flatten[Table[{Subscript[x, i],Subscript[y, i],Subscript[z, i]},{i,1,n}]]];
AllConstraints[n_]:=Module[{i},And@@Table[Subscript[x, i]^2+Subscript[y, i]^2+Subscript[z, i]^2==1,{i,1,n}]];
Normalize[v_]:=v/Norm[v];


(*Factors={1,2,3,12,13,23,123}*)
Factors=Times@@@Subsets[Transpose@Tuples[{1,-1},3],{1,3}];
(*Rearrange*)
(*Rearrange the numbers in the RHS to obtain different combinations*)
Factors[[{1,2,3,4,5,6,7}]]=Factors[[{1,2,3,4,5,6,7}]];
Factors=Transpose[Factors];



SetDelayed::write: Tag Normalize in Normalize[v_] is Protected.

FindConfiguration[n_,q_,opts___?OptionQ]:=Module[{vecs,bigsum,time,res,i,k,p,j,c,Nor,t,a,vecsx},
(*Probability
q=50/100;*)
s=1-q;
r=2*q-1;
vecs=Map[Table[Subscript[v, i],{i,1,n}].#&,Factors[[1;;8,1;;n]]]/.{Subscript[v, 1]->{1,0,0},Subscript[v, k_]->{MakeUnitVector[k][[1]],MakeUnitVector[k][[2]]*r,MakeUnitVector[k][[3]]*r}};
vecsx=Map[Table[Subscript[v, i],{i,1,n}].#&,Factors[[1;;8,1;;n]]]/.{Subscript[v, 1]->{1,0,0},Subscript[v, k_]->MakeUnitVector[k]};
bigsum=Plus@@Map[Sqrt[#.#]&,vecs];
{time,res}=Timing[NMaximize[{bigsum,AllConstraints[n]},AllParameters[n],opts,MaxIterations->500,WorkingPrecision->50,AccuracyGoal->Infinity,PrecisionGoal->Infinity]];
p=1/2 (1+res[[1]]/(n*2^3));
Print["n=",n," p=",N[p,10]," time=",time];
Nor=Map[Normalize,vecsx/.res[[2]]];
t=Table[1/Sqrt[1-4*s*q*(Nor[[j,2]]^2+Nor[[j,3]]^2)],{j,1,8}];
encod=Table[{t[[c]]*Nor[[c,1]],t[[c]]*Nor[[c,2]]*r^2,t[[c]]*Nor[[c,3]]*r^2},{c,1,8}];
meas=Table[MakeUnitVector[i]/.Join[{Subscript[θ, 1]->0,Subscript[φ, 1]->0,Subscript[x, 1]->1,Subscript[y, 1]->0,Subscript[z, 1]->0},res[[2]]],{i,1,n}];
Print["Encoding=",encod,"Measurements=",meas];
Print["Blue -> Encoded Strings, Red-> Up of Measurement"];
Show[SphericalPlot3D[1,{phi,0,2Pi},{theta,0,Pi},Mesh->None,PlotStyle->Directive[Yellow,Opacity[0.5]]],ListPointPlot3D[encod,PlotStyle->Directive[Blue,PointSize->.03]],ListPointPlot3D[meas,PlotStyle->Directive[Red,PointSize-> 0.02]]]
];

FindConfiguration[5,1,Method->"SimulatedAnnealing"]